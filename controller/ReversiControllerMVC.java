package cs3500.reversi.controller;

import cs3500.reversi.features.ModelEvent;
import cs3500.reversi.features.ViewEvent;
import cs3500.reversi.model.CubicPosn;
import cs3500.reversi.model.DiskState;
import cs3500.reversi.model.ReversiModel;
import cs3500.reversi.player.Player;
import cs3500.reversi.view.IView;

/**
 * {@code ReversiControllerMVC} is a controller class in the MVC architecture for a Reversi game
 * application. It implements {@link ReversiController}, {@link ModelEvent.ModelEventListener},
 * and {@link ViewEvent.ViewEventListener}, integrating the model and view components and
 * facilitating their interaction.
 *
 * <p>This controller is responsible for handling game logic and user interactions. It processes
 * player moves, updates the game state in the model, and reflects these changes in the view.
 * Additionally, it responds to events generated by both the model and the view, ensuring that the
 * game's flow is maintained correctly.
 *
 * <p>Key functionalities include:
 * <ul>
 *   <li>Starting the game and setting up the initial view state.</li>
 *   <li>Processing player moves and updating the model accordingly.</li>
 *   <li>Handling events from the model (like game state changes) and updating the view.</li>
 *   <li>Responding to user interactions from the view and making corresponding game actions.</li>
 * </ul>
 */
public class ReversiControllerMVC implements ReversiController,
        ModelEvent.ModelEventListener, ViewEvent.ViewEventListener {

  private final ReversiModel model;

  private final IView view;

  private final Player player; // The player associated with this controller

  private final DiskState turn;

  private CubicPosn toMove;

  private boolean fullGameOver;

  /**
   * constructor for a controller.
   * @param model the game
   * @param player the player for whom this controller is for
   * @param view the view for that player
   */
  public ReversiControllerMVC(ReversiModel model, Player player, IView view) {
    this.model = model;
    this.view = view;
    this.player = player;
    this.turn = model.assignDisk();
    this.view.updatePlayer(turn);
    this.view.addViewEventListener(this);
    this.model.addModelEventListener(this);
    this.player.addControllerListener(this);
    this.fullGameOver = false;
  }

  @Override
  public void startGame(ReversiModel model, int radius) {
    this.view.setVisible(true);
    this.view.updateScore(turn);
    this.view.refresh();
  }

  @Override
  public void placePiece() {
    try {
      model.placeTile(this.toMove);
    } catch (Exception e) {
      view.showError("Invalid Move! Try again.");
    }
  }

  @Override
  public void onPlayer(DiskState turn) {
    if (this.fullGameOver) {
      return;
    }
    if (turn == this.turn) {
      player.makeMove();
    }
  }

  @Override
  public void onMove(CubicPosn posn) {
    if (this.fullGameOver) {
      return;
    }
    if (model.isCurrentPlayer(turn)) {
      this.toMove = posn;
      player.placePiece();
    } else {
      view.showError("not your turn!");
    }
  }

  @Override
  public void onPass() {
    if (this.fullGameOver) {
      return;
    }
    if (model.isCurrentPlayer(turn)) {
      this.model.skipTurn();
    } else {
      view.showError("not your turn!");
    }
  }

  @Override
  public DiskState getTurn() {
    return turn;
  }

  @Override
  public void onAction() {
    if (model.isGameOver()) {
      this.view.showError("Game Over!");
      this.fullGameOver = true;
    }
    this.view.updateScore(turn);
    view.refresh();
  }
}
